# -*- coding: utf-8 -*-
"""file_toolkit_Collab-v4.ipynb

Automatically generated by Colab.

üîπ Fixed Full Code (Colab + Future-safe for large files)
"""

# !pip install pdfplumber python-docx pandas openpyxl pillow reportlab deep-translator


import os
import pdfplumber
import pandas as pd
from docx import Document
from PIL import Image, ImageDraw
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from deep_translator import GoogleTranslator
from google.colab import files

# --- FILE CONVERSION FUNCTIONS ---

def pdf_to_text(in_path, out_path):
    text = ""
    with pdfplumber.open(in_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() or ""
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(text)
    return out_path

def txt_to_pdf(in_path, out_path):
    doc = SimpleDocTemplate(out_path, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    with open(in_path, "r", encoding="utf-8", errors="ignore") as f:
        for line in f:
            if line.strip():
                story.append(Paragraph(line.strip(), styles["Normal"]))
    doc.build(story)
    return out_path

def txt_to_docx(in_path, out_path):
    doc = Document()
    with open(in_path, "r", encoding="utf-8", errors="ignore") as f:
        for line in f:
            doc.add_paragraph(line.strip())
    doc.save(out_path)
    return out_path

def txt_to_image(in_path, out_path):
    with open(in_path, "r", encoding="utf-8", errors="ignore") as f:
        text = f.read()
    img = Image.new("RGB", (1240, 1754), "white")
    draw = ImageDraw.Draw(img)
    draw.text((40, 40), text, fill="black")
    img.save(out_path)
    return out_path

def csv_to_xls(in_path, out_path):
    df = pd.read_csv(in_path)
    df.to_excel(out_path, index=False)
    return out_path

def generic_convert(in_file, out_file, fmt):
    ext = os.path.splitext(in_file)[1].lower()
    if ext == ".txt":
        if fmt == "pdf":
            return txt_to_pdf(in_file, out_file)
        elif fmt == "docx":
            return txt_to_docx(in_file, out_file)
        elif fmt == "png":
            return txt_to_image(in_file, out_file)
        else:
            raise ValueError("Unsupported format for txt")
    elif ext == ".pdf" and fmt == "txt":
        return pdf_to_text(in_file, out_file)
    elif ext == ".csv" and fmt == "xls":
        return csv_to_xls(in_file, out_file)
    else:
        raise ValueError(f"Conversion from {ext} to {fmt} not supported yet")

# --- FILE TRANSLATION WITH CHUNKS ---

def translate_text(text, src="auto", tgt="en"):
    res = []
    for start in range(0, len(text), 4000):
        chunk = text[start:start+4000]
        res.append(GoogleTranslator(source=src, target=tgt).translate(chunk))
    return "\n".join(res)

def translate_file(in_file, out_file, src="auto", tgt="en"):
    ext = os.path.splitext(in_file)[1].lower()
    if ext == ".pdf":
        txt = pdf_to_text(in_file, "temp.txt")
        with open(txt, "r", encoding="utf-8") as f: content = f.read()
    elif ext == ".docx":
        tmp = txt_to_docx(in_file, "temp.docx")
        content = open(tmp.replace(".docx", ".txt"), "r", encoding="utf-8").read() if False else open(in_file, "r", encoding="utf-8", errors="ignore").read()
    else:
        with open(in_file, "r", encoding="utf-8", errors="ignore") as f:
            content = f.read()
    translated = translate_text(content, src, tgt)
    with open(out_file, "w", encoding="utf-8") as f:
        f.write(translated)
    return out_file

# --- CLI MENU for Colab ---

def main():
    while True:
        print("\n==== File Toolkit ====")
        print("1. Convert File")
        print("2. Translate File")
        print("3. Exit")
        choice = input("Enter choice: ").strip()

        if choice == "1":
            uploaded = files.upload()
            in_file = list(uploaded.keys())[0]
            print("Supported conversions: txt‚Üípdf, txt‚Üídocx, txt‚Üípng, csv‚Üíxls, pdf‚Üítxt")
            fmt = input("Enter target format (pdf, docx, png, xls, txt): ").strip().lower()
            out = os.path.splitext(in_file)[0] + "_converted." + fmt
            try:
                generic_convert(in_file, out, fmt)
                print(f"‚úÖ Saved: {out}")
            except Exception as e:
                print("‚ùå Error:", e)

        elif choice == "2":
            uploaded = files.upload()
            in_file = list(uploaded.keys())[0]
            src = input("Source lang (e.g., en or auto): ").strip()
            tgt = input("Target lang (e.g., hi): ").strip()
            out = os.path.splitext(in_file)[0] + f"_{tgt}.txt"
            try:
                translate_file(in_file, out, src, tgt)
                print(f"‚úÖ Translated file: {out}")
            except Exception as e:
                print("‚ùå Error:", e)

        elif choice == "3":
            break
        else:
            print("Invalid choice!")

if __name__ == "__main__":
    main()
