# -*- coding: utf-8 -*-
"""file_toolkit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mi_qTwWfNjn-Vsk-h0vZAyu57k9c1wIP
"""

!pip install pypandoc pdfplumber python-docx pandas openpyxl pillow googletrans==4.0.0-rc1

!pip install deep-translator
!apt-get install pandoc
!pip install pypandoc

!pip install reportlab

# Install deps first in Colab
# !pip install pypandoc pdfplumber python-docx pandas openpyxl pillow deep-translator
# pandoc download will happen automatically inside code

import os
import pdfplumber
import pandas as pd
from docx import Document
from PIL import Image, ImageDraw, ImageFont
import pypandoc
from deep_translator import GoogleTranslator
from google.colab import files
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from google.colab import files

# Ensure pandoc available
try:
    pypandoc.get_pandoc_version()
except OSError:
    print("⚡ Installing Pandoc ...")
    pypandoc.download_pandoc()

# ---------- FILE CONVERSION ----------
def pdf_to_text(file_path, out_path):
    text = ""
    with pdfplumber.open(file_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() or ""
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(text)
    return out_path

def doc_to_text(file_path, out_path):
    doc = Document(file_path)
    text = "\n".join([para.text for para in doc.paragraphs])
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(text)
    return out_path

def text_to_image(file_path, out_path):
    with open(file_path, "r", encoding="utf-8") as f:
        text = f.read()
    img = Image.new("RGB", (1200, 1600), "white")
    draw = ImageDraw.Draw(img)
    draw.text((40, 40), text, fill="black")
    img.save(out_path)
    return out_path

def csv_to_xls(file_path, out_path):
    df = pd.read_csv(file_path)
    df.to_excel(out_path, index=False)
    return out_path

def txt_to_pdf(input_path, output_path):
    doc = SimpleDocTemplate(output_path, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    
    with open(input_path, "r", encoding="utf-8", errors="ignore") as f:
        for line in f:
            if line.strip():  # skip empty lines
                story.append(Paragraph(line.strip(), styles["Normal"]))
    
    doc.build(story)
    print(f"✅ PDF saved at {output_path}")

def generic_convert(in_file, out_file, format_to):
    ext = os.path.splitext(in_file)[1].lower()
    # For TXT input, force pandoc to treat as markdown
    input_format = "markdown_strict" if ext == ".txt" else None
    pypandoc.convert_file(
        in_file,
        to=format_to,
        format=input_format,   # fix for txt
        outputfile=out_file,
        extra_args=['--standalone']
    )
    return out_file

# ---------- FILE TRANSLATION ----------
def translate_text(text, src_lang="auto", dest_lang="en"):
    translated_chunks = []
    chunk_size = 4000  # Google limit
    for i in range(0, len(text), chunk_size):
        chunk = text[i:i+chunk_size]
        translated = GoogleTranslator(source=src_lang, target=dest_lang).translate(chunk)
        translated_chunks.append(translated)
    return "\n".join(translated_chunks)

def translate_file(file_path, out_path, src_lang="auto", dest_lang="en"):
    ext = os.path.splitext(file_path)[1].lower()

    # Extract text
    if ext == ".pdf":
        text_file = pdf_to_text(file_path, "temp.txt")
        with open(text_file, "r", encoding="utf-8") as f:
            content = f.read()
    elif ext == ".docx":
        text_file = doc_to_text(file_path, "temp.txt")
        with open(text_file, "r", encoding="utf-8") as f:
            content = f.read()
    else:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()

    # Translate (with chunking)
    translated_text = translate_text(content, src_lang, dest_lang)

    with open(out_path, "w", encoding="utf-8") as f:
        f.write(translated_text)

    return out_path

# ---------- CLI MENU ----------
def main():
    while True:
        print("\n===== File Toolkit =====")
        print("1. Convert File")
        print("2. Translate File")
        print("3. Exit")
        choice = input("Enter choice: ")

        if choice == "1":
            uploaded = files.upload()   # File upload dialog
            in_file = list(uploaded.keys())[0]
            print("\nConvert To -> pdf, txt, docx, csv, xls, png (image)")
            fmt = input("Enter target format: ").strip().lower()
            out_file = os.path.splitext(in_file)[0] + "_converted." + fmt

            try:
                ext = os.path.splitext(in_file)[1].lower()
                if ext == ".pdf" and fmt == "txt":
                    pdf_to_text(in_file, out_file)
                elif ext == ".docx" and fmt == "txt":
                    doc_to_text(in_file, out_file)
                elif ext == ".txt" and fmt == "png":
                    text_to_image(in_file, out_file)
                elif ext == ".csv" and fmt == "xls":
                    csv_to_xls(in_file, out_file)
                else:
                    generic_convert(in_file, out_file, fmt)
                print(f"✅ Converted file saved at {out_file}")
            except Exception as e:
                print("❌ Conversion failed:", e)

        elif choice == "2":
            uploaded = files.upload()
            in_file = list(uploaded.keys())[0]
            src_lang = input("Source language code (or 'auto'): ").strip()
            dest_lang = input("Target language code (e.g., en, hi, fr, de): ").strip()
            out_file = os.path.splitext(in_file)[0] + f"_{dest_lang}.txt"
            try:
                translate_file(in_file, out_file, src_lang, dest_lang)
                print(f"✅ Translated file saved at {out_file}")
            except Exception as e:
                print("❌ Translation failed:", e)

        elif choice == "3":
            print("Exiting...")
            break
        else:
            print("Invalid choice!")

if __name__ == "__main__":
    main()

from google.colab import files
files.download("B20442415 - Copy_hi.txt")