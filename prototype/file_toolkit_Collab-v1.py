# -*- coding: utf-8 -*-
"""file_toolkit_Collab-v1.ipynb

Automatically generated by Colab.

This very basic code upto 2 MB file can convert and translated.
"""

!pip install pypandoc pdfplumber python-docx pandas openpyxl pillow googletrans==4.0.0-rc1

!pip install deep-translator
!apt-get install pandoc
!pip install pypandoc
!pip install reportlab

import os
import pdfplumber
import pandas as pd
from docx import Document
from PIL import Image, ImageDraw, ImageFont
import pypandoc
from googletrans import Translator

# ---------- FILE CONVERSION ----------

def pdf_to_text(file_path, out_path):
    text = ""
    with pdfplumber.open(file_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() or ""
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(text)
    return out_path

def doc_to_text(file_path, out_path):
    doc = Document(file_path)
    text = "\n".join([para.text for para in doc.paragraphs])
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(text)
    return out_path

def text_to_image(file_path, out_path):
    with open(file_path, "r", encoding="utf-8") as f:
        text = f.read()
    img = Image.new("RGB", (1200, 1600), "white")
    draw = ImageDraw.Draw(img)
    draw.text((40, 40), text, fill="black")
    img.save(out_path)
    return out_path

def csv_to_xls(file_path, out_path):
    df = pd.read_csv(file_path)
    df.to_excel(out_path, index=False)
    return out_path

def generic_convert(in_file, out_file, format_to):
    """Uses pypandoc for flexible conversion"""
    output = pypandoc.convert_file(in_file, format_to, outputfile=out_file, extra_args=['--standalone'])
    return out_file

# ---------- FILE TRANSLATION ----------

def translate_text(text, src_lang="auto", dest_lang="en"):
    translator = Translator()
    translated = translator.translate(text, src=src_lang, dest=dest_lang)
    return translated.text

def translate_file(file_path, out_path, src_lang="auto", dest_lang="en"):
    ext = os.path.splitext(file_path)[1].lower()
    
    # Extract text depending on file type
    if ext == ".pdf":
        text_file = pdf_to_text(file_path, "temp.txt")
        with open(text_file, "r", encoding="utf-8") as f:
            content = f.read()
    elif ext == ".docx":
        text_file = doc_to_text(file_path, "temp.txt")
        with open(text_file, "r", encoding="utf-8") as f:
            content = f.read()
    elif ext in [".txt", ".csv"]:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
    else:
        raise ValueError("Unsupported format for translation")

    # Translate
    translated_text = translate_text(content, src_lang, dest_lang)

    # Save output
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(translated_text)

    return out_path

# ---------- DEMO ----------

if __name__ == "__main__":
    # Example Conversion
    # pdf_to_text("sample.pdf", "output.txt")
    # generic_convert("sample.docx", "output.pdf", "pdf")
    # text_to_image("sample.txt", "output.png")
    # csv_to_xls("data.csv", "data.xlsx")

    # Example Translation
    # translate_file("sample.pdf", "translated.txt", src_lang="en", dest_lang="hi")
    print("âœ… Toolkit Ready: Convert + Translate Files")
