# -*- coding: utf-8 -*-
"""file_toolkit_Collab-v4.ipynb

Automatically generated by Colab.

🔥 Universal File Converter
"""

# 📌 Install dependencies (only once)
!pip install reportlab python-docx openpyxl pandas pypandoc pdf2image PyPDF2

import os
import pandas as pd
from docx import Document
from openpyxl import Workbook, load_workbook
from PyPDF2 import PdfReader
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import pypandoc
from pdf2image import convert_from_path

# ---------- Helper Functions ----------

def txt_to_pdf(input_path, output_path):
    with open(input_path, "r", encoding="utf-8", errors="ignore") as f:
        text = f.read()
    c = canvas.Canvas(output_path, pagesize=letter)
    width, height = letter
    y = height - 50
    for line in text.split("\n"):
        if y < 50:  # new page
            c.showPage()
            y = height - 50
        c.drawString(40, y, line[:110])  # wrap text
        y -= 15
    c.save()

def txt_to_csv(input_path, output_path):
    df = pd.read_csv(input_path, delimiter="\t", engine="python", error_bad_lines=False)
    df.to_csv(output_path, index=False)

def txt_to_xls(input_path, output_path):
    df = pd.read_csv(input_path, delimiter="\t", engine="python", error_bad_lines=False)
    df.to_excel(output_path, index=False)

def txt_to_docx(in_path, out_path):
    doc = Document()
    with open(in_path, "r", encoding="utf-8", errors="ignore") as f:
        for line in f:
            doc.add_paragraph(line.strip())
    doc.save(out_path)
    return out_path

def txt_to_image(in_path, out_path):
    with open(in_path, "r", encoding="utf-8", errors="ignore") as f:
        text = f.read()
    img = Image.new("RGB", (1240, 1754), "white")
    draw = ImageDraw.Draw(img)
    draw.text((40, 40), text, fill="black")
    img.save(out_path)
    return out_path

#def pdf_to_doc(input_path, output_path):
#    pypandoc.convert_file(input_path, "docx", outputfile=output_path)

def pdf_to_docx(input_path, output_path):
    doc = Document()
    with pdfplumber.open(input_path) as pdf:
        for page in pdf.pages:   # page-by-page read (chunk style)
            text = page.extract_text()
            if text:
                for line in text.split("\n"):
                    doc.add_paragraph(line)
    doc.save(output_path)

def pdf_to_txt(input_path, output_path):
    reader = PdfReader(input_path)
    text = ""
    for page in reader.pages:
        text += page.extract_text() + "\n"
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(text)

def pdf_to_csv(input_path, output_path):
    reader = PdfReader(input_path)
    text = ""
    for page in reader.pages:
        text += page.extract_text() + "\n"
    lines = [line.split() for line in text.split("\n") if line.strip()]
    df = pd.DataFrame(lines)
    df.to_csv(output_path, index=False)

def pdf_to_xls(input_path, output_path):
    reader = PdfReader(input_path)
    text = ""
    for page in reader.pages:
        text += page.extract_text() + "\n"
    lines = [line.split() for line in text.split("\n") if line.strip()]
    df = pd.DataFrame(lines)
    df.to_excel(output_path, index=False)

def pdf_to_image(input_path, output_folder):
    images = convert_from_path(input_path)
    for i, img in enumerate(images):
        img.save(os.path.join(output_folder, f"page_{i+1}.png"), "PNG")

def csv_to_pdf(input_path, output_path):
    df = pd.read_csv(input_path)
    c = canvas.Canvas(output_path, pagesize=letter)
    width, height = letter
    y = height - 50
    for row in df.astype(str).values.tolist():
        line = " | ".join(row)
        if y < 50:
            c.showPage()
            y = height - 50
        c.drawString(40, y, line[:110])
        y -= 15
    c.save()

def csv_to_doc(input_path, output_path):
    df = pd.read_csv(input_path)
    doc = Document()
    table = doc.add_table(rows=1, cols=len(df.columns))
    hdr_cells = table.rows[0].cells
    for i, col in enumerate(df.columns):
        hdr_cells[i].text = str(col)
    for row in df.values.tolist():
        row_cells = table.add_row().cells
        for i, val in enumerate(row):
            row_cells[i].text = str(val)
    doc.save(output_path)

def csv_to_txt(input_path, output_path):
    df = pd.read_csv(input_path)
    df.to_csv(output_path, sep="\t", index=False)

def xls_to_pdf(input_path, output_path):
    df = pd.read_excel(input_path)
    c = canvas.Canvas(output_path, pagesize=letter)
    width, height = letter
    y = height - 50
    for row in df.astype(str).values.tolist():
        line = " | ".join(row)
        if y < 50:
            c.showPage()
            y = height - 50
        c.drawString(40, y, line[:110])
        y -= 15
    c.save()

def xls_to_doc(input_path, output_path):
    df = pd.read_excel(input_path)
    doc = Document()
    table = doc.add_table(rows=1, cols=len(df.columns))
    hdr_cells = table.rows[0].cells
    for i, col in enumerate(df.columns):
        hdr_cells[i].text = str(col)
    for row in df.values.tolist():
        row_cells = table.add_row().cells
        for i, val in enumerate(row):
            row_cells[i].text = str(val)
    doc.save(output_path)

def xls_to_txt(input_path, output_path):
    df = pd.read_excel(input_path)
    df.to_csv(output_path, sep="\t", index=False)

# ---------- Conversion Router ----------
def convert_file(input_path, output_path, target_format):
    ext = os.path.splitext(input_path)[1].lower()
    
    if ext == ".txt" and target_format == "pdf":
        txt_to_pdf(input_path, output_path)
    elif ext == ".txt" and target_format == "csv":
        txt_to_csv(input_path, output_path)
    elif ext == ".txt" and target_format == "doc":
        txt_to_doc(input_path, output_path)
    elif ext == ".txt" and target_format == "png":
        txt_to_png(input_path, output_path)
    elif ext == ".txt" and target_format in ["xls", "xlsx"]:
        txt_to_xls(input_path, output_path)
    elif ext == ".pdf" and target_format == "docx":
        pdf_to_doc(input_path, output_path)
    elif ext == ".pdf" and target_format == "txt":
        pdf_to_txt(input_path, output_path)
    elif ext == ".pdf" and target_format == "csv":
        pdf_to_csv(input_path, output_path)
    elif ext == ".pdf" and target_format in ["xls", "xlsx"]:
        pdf_to_xls(input_path, output_path)
    elif ext == ".pdf" and target_format == "png":
        pdf_to_image(input_path, os.path.dirname(output_path))
    elif ext == ".csv" and target_format == "pdf":
        csv_to_pdf(input_path, output_path)
    elif ext == ".csv" and target_format == "docx":
        csv_to_doc(input_path, output_path)
    elif ext == ".csv" and target_format == "txt":
        csv_to_txt(input_path, output_path)
    elif ext in [".xls", ".xlsx"] and target_format == "pdf":
        xls_to_pdf(input_path, output_path)
    elif ext in [".xls", ".xlsx"] and target_format == "docx":
        xls_to_doc(input_path, output_path)
    elif ext in [".xls", ".xlsx"] and target_format == "txt":
        xls_to_txt(input_path, output_path)
    else:
        raise ValueError(f"❌ Conversion from {ext} to {target_format} not supported yet")

# --- CLI MENU for Colab ---

def main():
    while True:
        print("\n==== File Toolkit ====")
        print("1. Convert File")
        print("2. Translate File")
        print("3. Exit")
        choice = input("Enter choice: ").strip()

        if choice == "1":
            uploaded = files.upload()
            in_file = list(uploaded.keys())[0]
            print("Supported conversions: txt→pdf, txt→docx, txt→png, csv→xls, pdf→txt")
            fmt = input("Enter target format (pdf, docx, png, xls, txt): ").strip().lower()
            out = os.path.splitext(in_file)[0] + "_converted." + fmt
            try:
                generic_convert(in_file, out, fmt)
                print(f"✅ Saved: {out}")
            except Exception as e:
                print("❌ Error:", e)

        
        elif choice == "2":
            break
        else:
            print("Invalid choice!")

if __name__ == "__main__":
    main()
