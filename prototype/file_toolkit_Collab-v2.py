# -*- coding: utf-8 -*-
"""file_toolkit_Collab-v2.ipynb

Automatically generated by Colab.

This code have Python CLI Toolkit – File Convert + Translate
"""

# !pip install pypandoc pdfplumber python-docx pandas openpyxl pillow googletrans==4.0.0-rc1

import os
import pdfplumber
import pandas as pd
from docx import Document
from PIL import Image, ImageDraw
import pypandoc
from googletrans import Translator
from google.colab import files
from deep_translator import GoogleTranslator

# ---------- FILE CONVERSION ----------
def pdf_to_text(file_path, out_path):
    text = ""
    with pdfplumber.open(file_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() or ""
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(text)
    return out_path

def doc_to_text(file_path, out_path):
    doc = Document(file_path)
    text = "\n".join([para.text for para in doc.paragraphs])
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(text)
    return out_path

def text_to_image(file_path, out_path):
    with open(file_path, "r", encoding="utf-8") as f:
        text = f.read()
    img = Image.new("RGB", (1200, 1600), "white")
    draw = ImageDraw.Draw(img)
    draw.text((40, 40), text, fill="black")
    img.save(out_path)
    return out_path

def csv_to_xls(file_path, out_path):
    df = pd.read_csv(file_path)
    df.to_excel(out_path, index=False)
    return out_path

def generic_convert(in_file, out_file, format_to):
    pypandoc.convert_file(in_file, format_to, outputfile=out_file, extra_args=['--standalone'])
    return out_file

# ---------- FILE TRANSLATION ----------
def translate_text(text, src_lang="auto", dest_lang="en"):
    translated_chunks = []
    chunk_size = 4000  # Google limit
    for i in range(0, len(text), chunk_size):
        chunk = text[i:i+chunk_size]
        translated = GoogleTranslator(source=src_lang, target=dest_lang).translate(chunk)
        translated_chunks.append(translated)
    return "\n".join(translated_chunks)
    
    
def translate_file(file_path, out_path, src_lang="auto", dest_lang="en"):
    ext = os.path.splitext(file_path)[1].lower()
    
    # Extract text
    if ext == ".pdf":
        temp = pdf_to_text(file_path, "temp.txt")
        with open(temp, "r", encoding="utf-8") as f:
            content = f.read()
    elif ext == ".docx":
        temp = doc_to_text(file_path, "temp.txt")
        with open(temp, "r", encoding="utf-8") as f:
            content = f.read()
    else:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()

    translated_text = translate_text(content, src_lang, dest_lang)
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(translated_text)
    return out_path

# ---------- CLI MENU ----------
def main():
    while True:
        print("\n===== File Toolkit =====")
        print("1. Convert File")
        print("2. Translate File")
        print("3. Exit")
        choice = input("Enter choice: ")

        if choice == "1":
            #in_file = input("Enter input file path: ")
            uploaded = files.upload()   # Opens a "Choose File" dialog
            in_file = list(uploaded.keys())[0]  # Gets uploaded file name
            print("\nConvert To -> pdf, txt, docx, csv, xls, png (image)")
            fmt = input("Enter target format: ").strip().lower()
            out_file = os.path.splitext(in_file)[0] + "_converted." + fmt

            try:
                ext = os.path.splitext(in_file)[1].lower()
                if ext == ".pdf" and fmt == "txt":
                    pdf_to_text(in_file, out_file)
                elif ext == ".docx" and fmt == "txt":
                    doc_to_text(in_file, out_file)
                elif ext == ".txt" and fmt == "png":
                    text_to_image(in_file, out_file)
                elif ext == ".csv" and fmt == "xls":
                    csv_to_xls(in_file, out_file)
                else:
                    generic_convert(in_file, out_file, fmt)
                print(f"✅ Converted file saved at {out_file}")
            except Exception as e:
                print("❌ Conversion failed:", e)

        elif choice == "2":
            #in_file = input("Enter input file path: ")
            uploaded = files.upload()   # Opens a "Choose File" dialog
            in_file = list(uploaded.keys())[0]  # Gets uploaded file name
            src_lang = input("Source language code (or 'auto'): ").strip()
            dest_lang = input("Target language code (e.g., en, hi, fr, de): ").strip()
            out_file = os.path.splitext(in_file)[0] + f"_{dest_lang}.txt"
            try:
                translate_file(in_file, out_file, src_lang, dest_lang)
                print(f"✅ Translated file saved at {out_file}")
            except Exception as e:
                print("❌ Translation failed:", e)

        elif choice == "3":
            print("Exiting...")
            break
        else:
            print("Invalid choice!")

if __name__ == "__main__":
    main()
